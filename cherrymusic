#!/usr/bin/python3
#
# CherryMusic - a standalone music server
# Copyright (c) 2012 Tom Wallroth & Tilman Boerner
#
# Project page:
#   http://fomori.org/cherrymusic/
# Sources on github:
#   http://github.com/devsnd/cherrymusic/
#
# CherryMusic is based on
#   jPlayer (GPL/MIT license) http://www.jplayer.org/
#   CherryPy (BSD license) http://www.cherrypy.org/
#
# licensed under GNU GPL version 3 (or later)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

import cmbootstrap
import cherrymusicserver
try:
	import argparse
except ImportError:
	#python 3.1 workaround, can be dropped once 3.2 is in debian.
	from backport import argparse
    #end of workaround

parser = argparse.ArgumentParser(description='''CherryMusic Server
Version ''' + cherrymusicserver.VERSION)

if 'OptionParser' in dir(argparse):
    parser.add_argument('--update', dest='update', nargs=0, default=None, help='update the media database (get Python >= 3.2 or the argparse module to choose paths)')
else:
    parser.add_argument('--update', dest='update', nargs='*', metavar='PATH', help='update the media database. PATH must start with basedir or be relative to basedir.')
parser.add_argument('--newconfig', dest='newconfig', action='store_true', help='creates a new config file next to your current one, e.g. ~/.config/cherrymusic/cherrymusic.conf.new')
parser.add_argument('--dropfiledb', dest='dropfiledb', action='store_true', help='Clears the file database. This might be necesary after a version jump.')
parser.add_argument('--download-stagger', dest='downloadstagger', action='store_true', help='downloads the python module "stagger", an ID3-tag library, so that your music can be indexed more precisely. (should only be used when not installed using a package manager!)')
parser.add_argument('--setup', dest='setup', action='store_true', help='Configure CherryMusic in your browser')
parser.add_argument('--port', dest='port', nargs=1, help='Override the port used to start the server')
args = parser.parse_args()

if args.downloadstagger:
    cmbootstrap.DependencyInstaller().install_stagger()

if __name__ == "__main__":
    port = int(args.port[0]) if args.port else False
    cherrymusicserver.CherryMusic(update=args.update, createNewConfig=args.newconfig, dropfiledb=args.dropfiledb,setup=args.setup, port=port)

